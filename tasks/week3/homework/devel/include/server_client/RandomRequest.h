// Generated by gencpp from file server_client/RandomRequest.msg
// DO NOT EDIT!


#ifndef SERVER_CLIENT_MESSAGE_RANDOMREQUEST_H
#define SERVER_CLIENT_MESSAGE_RANDOMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace server_client
{
template <class ContainerAllocator>
struct RandomRequest_
{
  typedef RandomRequest_<ContainerAllocator> Type;

  RandomRequest_()
    : number(0.0)  {
    }
  RandomRequest_(const ContainerAllocator& _alloc)
    : number(0.0)  {
  (void)_alloc;
    }



   typedef float _number_type;
  _number_type number;





  typedef boost::shared_ptr< ::server_client::RandomRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::server_client::RandomRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RandomRequest_

typedef ::server_client::RandomRequest_<std::allocator<void> > RandomRequest;

typedef boost::shared_ptr< ::server_client::RandomRequest > RandomRequestPtr;
typedef boost::shared_ptr< ::server_client::RandomRequest const> RandomRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::server_client::RandomRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::server_client::RandomRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::server_client::RandomRequest_<ContainerAllocator1> & lhs, const ::server_client::RandomRequest_<ContainerAllocator2> & rhs)
{
  return lhs.number == rhs.number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::server_client::RandomRequest_<ContainerAllocator1> & lhs, const ::server_client::RandomRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace server_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::server_client::RandomRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::server_client::RandomRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::server_client::RandomRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::server_client::RandomRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::server_client::RandomRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::server_client::RandomRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::server_client::RandomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ded049c24c756963282afab14b2d0f6d";
  }

  static const char* value(const ::server_client::RandomRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xded049c24c756963ULL;
  static const uint64_t static_value2 = 0x282afab14b2d0f6dULL;
};

template<class ContainerAllocator>
struct DataType< ::server_client::RandomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "server_client/RandomRequest";
  }

  static const char* value(const ::server_client::RandomRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::server_client::RandomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 number\n"
;
  }

  static const char* value(const ::server_client::RandomRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::server_client::RandomRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RandomRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::server_client::RandomRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::server_client::RandomRequest_<ContainerAllocator>& v)
  {
    s << indent << "number: ";
    Printer<float>::stream(s, indent + "  ", v.number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVER_CLIENT_MESSAGE_RANDOMREQUEST_H
