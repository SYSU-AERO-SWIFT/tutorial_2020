// Generated by gencpp from file random_create/RandomNum.msg
// DO NOT EDIT!


#ifndef RANDOM_CREATE_MESSAGE_RANDOMNUM_H
#define RANDOM_CREATE_MESSAGE_RANDOMNUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace random_create
{
template <class ContainerAllocator>
struct RandomNum_
{
  typedef RandomNum_<ContainerAllocator> Type;

  RandomNum_()
    : randNum(0)
    , callback(0)  {
    }
  RandomNum_(const ContainerAllocator& _alloc)
    : randNum(0)
    , callback(0)  {
  (void)_alloc;
    }



   typedef uint8_t _randNum_type;
  _randNum_type randNum;

   typedef uint8_t _callback_type;
  _callback_type callback;





  typedef boost::shared_ptr< ::random_create::RandomNum_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::random_create::RandomNum_<ContainerAllocator> const> ConstPtr;

}; // struct RandomNum_

typedef ::random_create::RandomNum_<std::allocator<void> > RandomNum;

typedef boost::shared_ptr< ::random_create::RandomNum > RandomNumPtr;
typedef boost::shared_ptr< ::random_create::RandomNum const> RandomNumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::random_create::RandomNum_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::random_create::RandomNum_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::random_create::RandomNum_<ContainerAllocator1> & lhs, const ::random_create::RandomNum_<ContainerAllocator2> & rhs)
{
  return lhs.randNum == rhs.randNum &&
    lhs.callback == rhs.callback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::random_create::RandomNum_<ContainerAllocator1> & lhs, const ::random_create::RandomNum_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace random_create

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::random_create::RandomNum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::random_create::RandomNum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::random_create::RandomNum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::random_create::RandomNum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::random_create::RandomNum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::random_create::RandomNum_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::random_create::RandomNum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a632e4b30aa8c63125730332e5ca6e8";
  }

  static const char* value(const ::random_create::RandomNum_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a632e4b30aa8c63ULL;
  static const uint64_t static_value2 = 0x125730332e5ca6e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::random_create::RandomNum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "random_create/RandomNum";
  }

  static const char* value(const ::random_create::RandomNum_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::random_create::RandomNum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 randNum\n"
"uint8 callback\n"
;
  }

  static const char* value(const ::random_create::RandomNum_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::random_create::RandomNum_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.randNum);
      stream.next(m.callback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RandomNum_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::random_create::RandomNum_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::random_create::RandomNum_<ContainerAllocator>& v)
  {
    s << indent << "randNum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.randNum);
    s << indent << "callback: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.callback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RANDOM_CREATE_MESSAGE_RANDOMNUM_H
